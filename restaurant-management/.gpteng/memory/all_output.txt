To implement the Event Storming Model for a restaurant management system in PHP, we will create a set of PHP classes that represent the aggregates, commands, and events described in the model. We will also create a simple infrastructure to handle commands and raise events.

Here are the core classes and their purposes:

- `Restaurant`: The aggregate root for the Restaurant aggregate.
- `Menu`: The aggregate root for the Menu aggregate.
- `Money`: A value object to represent money.
- `CreateRestaurantCommand`: A command to create a new restaurant.
- `UpdateRestaurantCommand`: A command to update an existing restaurant.
- `RestaurantCreatedEvent`: An event that is raised when a restaurant is created.
- `CommandHandler`: A class to handle commands.
- `EventPublisher`: A class to publish events.

Let's start with the entry point file, which will be a simple script to demonstrate the usage of the system.

index.php
```php
<?php

require_once 'vendor/autoload.php';

use RestaurantManagement\Domain\Command\CreateRestaurantCommand;
use RestaurantManagement\Domain\Command\UpdateRestaurantCommand;
use RestaurantManagement\Domain\CommandHandler\CommandHandler;
use RestaurantManagement\Domain\Event\EventPublisher;
use RestaurantManagement\Domain\Model\Restaurant\RestaurantRepository;
use RestaurantManagement\Infrastructure\Persistence\InMemoryRestaurantRepository;

// Initialize repositories
$restaurantRepository = new InMemoryRestaurantRepository();

// Initialize command handler and event publisher
$commandHandler = new CommandHandler($restaurantRepository);
$eventPublisher = new EventPublisher();

// Example usage
$createRestaurantCommand = new CreateRestaurantCommand('My Restaurant', []);
$commandHandler->handleCreateRestaurant($createRestaurantCommand);

$updateRestaurantCommand = new UpdateRestaurantCommand('restaurant-id-123', 'Updated Restaurant Name', []);
$commandHandler->handleUpdateRestaurant($updateRestaurantCommand);

// Output the events that were published
foreach ($eventPublisher->getEvents() as $event) {
    echo $event->getName() . " event published with data: " . json_encode($event->getData()) . PHP_EOL;
}
```

Now, let's create the classes that are imported by the entry point file.

composer.json
```json
{
    "require": {
        "php": "^7.4 || ^8.0"
    },
    "autoload": {
        "psr-4": {
            "RestaurantManagement\\": "src/"
        }
    }
}
```

src/Domain/Model/Restaurant/Restaurant.php
```php
<?php

namespace RestaurantManagement\Domain\Model\Restaurant;

use RestaurantManagement\Domain\Model\Menu\Menu;

class Restaurant
{
    private string $restaurantId;
    private string $name;
    private array $menu;

    public function __construct(string $restaurantId, string $name, array $menu)
    {
        $this->restaurantId = $restaurantId;
        $this->name = $name;
        $this->menu = $menu;
    }

    public function updateRestaurant(string $name, array $menu): void
    {
        $this->name = $name;
        $this->menu = $menu;
    }

    // Getters and setters...
}
```

src/Domain/Model/Menu/Menu.php
```php
<?php

namespace RestaurantManagement\Domain\Model\Menu;

use RestaurantManagement\Domain\ValueObject\Money;

class Menu
{
    private string $name;
    private Money $price;
    private string $description;
    private $image; // Assuming $image is a File object or a string path

    public function __construct(string $name, Money $price, string $description, $image)
    {
        $this->name = $name;
        $this->price = $price;
        $this->description = $description;
        $this->image = $image;
    }

    // Getters and setters...
}
```

src/Domain/ValueObject/Money.php
```php
<?php

namespace RestaurantManagement\Domain\ValueObject;

class Money
{
    private float $amount;
    private string $currency;

    public function __construct(float $amount, string $currency = 'USD')
    {
        $this->amount = $amount;
        $this->currency = $currency;
    }

    // Getters and setters...
}
```

src/Domain/Command/CreateRestaurantCommand.php
```php
<?php

namespace RestaurantManagement\Domain\Command;

class CreateRestaurantCommand
{
    private string $name;
    private array $menu;

    public function __construct(string $name, array $menu)
    {
        $this->name = $name;
        $this->menu = $menu;
    }

    // Getters...
}
```

src/Domain/Command/UpdateRestaurantCommand.php
```php
<?php

namespace RestaurantManagement\Domain\Command;

class UpdateRestaurantCommand
{
    private string $restaurantId;
    private string $name;
    private array $menu;

    public function __construct(string $restaurantId, string $name, array $menu)
    {
        $this->restaurantId = $restaurantId;
        $this->name = $name;
        $this->menu = $menu;
    }

    // Getters...
}
```

src/Domain/Event/RestaurantCreatedEvent.php
```php
<?php

namespace RestaurantManagement\Domain\Event;

class RestaurantCreatedEvent
{
    private string $restaurantId;
    private string $name;
    private array $menu;

    public function __construct(string $restaurantId, string $name, array $menu)
    {
        $this->restaurantId = $restaurantId;
        $this->name = $name;
        $this->menu = $menu;
    }

    public function getName(): string
    {
        return 'RestaurantCreated';
    }

    public function getData(): array
    {
        return [
            'restaurantId' => $this->restaurantId,
            'name' => $this->name,
            'menu' => $this->menu,
        ];
    }
}
```

src/Domain/CommandHandler/CommandHandler.php
```php
<?php

namespace RestaurantManagement\Domain\CommandHandler;

use RestaurantManagement\Domain\Command\CreateRestaurantCommand;
use RestaurantManagement\Domain\Command\UpdateRestaurantCommand;
use RestaurantManagement\Domain\Event\RestaurantCreatedEvent;
use RestaurantManagement\Domain\Model\Restaurant\RestaurantRepository;
use RestaurantManagement\Domain\Event\EventPublisher;

class CommandHandler
{
    private RestaurantRepository $restaurantRepository;
    private EventPublisher $eventPublisher;

    public function __construct(RestaurantRepository $restaurantRepository, EventPublisher $eventPublisher)
    {
        $this->restaurantRepository = $restaurantRepository;
        $this->eventPublisher = $eventPublisher;
    }

    public function handleCreateRestaurant(CreateRestaurantCommand $command): void
    {
        // Logic to create a restaurant...
        $restaurantId = uniqid(); // Generate a unique ID for the restaurant
        $restaurant = new Restaurant($restaurantId, $command->getName(), $command->getMenu());
        $this->restaurantRepository->save($restaurant);

        // Publish an event
        $event = new RestaurantCreatedEvent($restaurantId, $command->getName(), $command->getMenu());
        $this->eventPublisher->publish($event);
    }

    public function handleUpdateRestaurant(UpdateRestaurantCommand $command): void
    {
        // Logic to update a restaurant...
        $restaurant = $this->restaurantRepository->findById($command->getRestaurantId());
        if ($restaurant) {
            $restaurant->updateRestaurant($command->getName(), $command->getMenu());
            $this->restaurantRepository->save($restaurant);
        }

        // No event is defined for update in the model, but you could publish one if needed
    }
}
```

src/Domain/Event/EventPublisher.php
```php
<?php

namespace RestaurantManagement\Domain\Event;

class EventPublisher
{
    private array $events = [];

    public function publish($event): void
    {
        $this->events[] = $event;
    }

    public function getEvents(): array
    {
        return $this->events;
    }
}
```

src/Domain/Model/Restaurant/RestaurantRepository.php
```php
<?php

namespace RestaurantManagement\Domain\Model\Restaurant;

interface RestaurantRepository
{
    public function save(Restaurant $restaurant): void;
    public function findById(string $restaurantId): ?Restaurant;
}
```

src/Infrastructure/Persistence/InMemoryRestaurantRepository.php
```php
<?php

namespace RestaurantManagement\Infrastructure\Persistence;

use RestaurantManagement\Domain\Model\Restaurant\Restaurant;
use RestaurantManagement\Domain\Model\Restaurant\RestaurantRepository;

class InMemoryRestaurantRepository implements RestaurantRepository
{
    private array $restaurants = [];

    public function save(Restaurant $restaurant): void
    {
        $this->restaurants[$restaurant->getRestaurantId()] = $restaurant;
    }

    public function findById(string $restaurantId): ?Restaurant
    {
        return $this->restaurants[$restaurantId] ?? null;
    }
}
```

Finally, we need to create the `composer.json` file to manage our dependencies and autoloading.

composer.json
```json
{
    "require": {
        "php": "^7.4 || ^8.0"
    },
    "autoload": {
        "psr-4": {
            "RestaurantManagement\\": "src/"
        }
    }
}
```

After creating these files, you would run `composer install` to generate the `vendor` directory and the autoloader.

This concludes a fully working implementation.