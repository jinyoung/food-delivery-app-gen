Please implement for this Event Storming Model:

{"_type":"BoundedContext","aggregates":[{"aggregateRoot":{"_type":"AggregateRoot","fieldDescriptors":[{"className":"String","name":"orderId","displayName":"주문 ID","_type":"FieldDescriptor"},{"className":"List<MenuSelection>","name":"menu","displayName":"메뉴","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","displayName":"배달 주소","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","displayName":"결제 방법","_type":"FieldDescriptor"}]},"commands":[{"_type":"Command","fieldDescriptors":[{"className":"List<MenuSelection>","name":"menu","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"}],"name":"CreateOrder","displayName":"주문 생성"},{"_type":"Command","fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"status","_type":"FieldDescriptor"}],"name":"UpdateOrderStatus","displayName":"주문 상태 업데이트"}],"events":[{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"List<MenuSelection>","name":"menu","_type":"FieldDescriptor"},{"className":"Address","name":"deliveryAddress","_type":"FieldDescriptor"},{"className":"String","name":"paymentMethod","_type":"FieldDescriptor"}],"name":"OrderPlaced","displayName":"주문 생성됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"restaurantId","_type":"FieldDescriptor"}],"name":"OrderReceived","displayName":"주문 수신됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"}],"name":"OrderConfirmed","displayName":"주문 확인됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"deliveryDriverId","_type":"FieldDescriptor"}],"name":"OrderAssigned","displayName":"주문 할당됨","_type":"Event"},{"fieldDescriptors":[{"className":"String","name":"orderId","_type":"FieldDescriptor"},{"className":"String","name":"status","_type":"FieldDescriptor"}],"name":"OrderStatusUpdated","displayName":"주문 상태 업데이트됨","_type":"Event"}],"name":"Order","displayName":"주문","_type":"Aggregate"}],"name":"order-management","displayName":"주문 관리","policies":[{"fieldDescriptors":[],"name":"OrderAssignmentPolicy","displayName":"주문 할당 정책","_type":"Policy"}]}


I want to utilize following techniques:

- transaction script using jdbc prepared statement
- H2 DB
- spring-boot2
- DO NOT USE any domain classes or JPA repository concept. 직접적으로 컨트롤러나 서비스에서 곧바로 SQL을 생성하여 주문을 받고 처리.


SELF-CRITICISM: 
 - when you create pom.xml, USE correct parent project to spring boot 3
 - when you create pom.xml, you MUST specify the version: 3.1.3 ONLY for the spring-cloud-streams
 - Please generate start from pom.xml


when you create execution shell (run.sh), please add '--no-transfer-progress' option not to output transfer progress if there's mvn command:

```
mvn [command] --no-transfer-progress
```

