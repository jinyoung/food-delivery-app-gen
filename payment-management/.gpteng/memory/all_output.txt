Let's start by creating the `pom.xml` file for the Maven project configuration. This file will define the project dependencies and properties, including the Spring Boot parent project and the specific version of `spring-cloud-streams`.

pom.xml
```xml
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>com.example</groupId>
    <artifactId>payment-management</artifactId>
    <version>1.0-SNAPSHOT</version>
    <packaging>war</packaging>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.1.3</version>
    </parent>

    <properties>
        <java.version>11</java.version>
    </properties>

    <dependencies>
        <!-- Spring Boot Web Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!-- H2 Database Engine -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>

        <!-- Spring Cloud Stream -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-stream</artifactId>
            <version>3.1.3</version>
        </dependency>

        <!-- JSP API -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>javax.servlet-api</artifactId>
            <scope>provided</scope>
        </dependency>

        <!-- JSTL for JSP -->
        <dependency>
            <groupId>javax.servlet</groupId>
            <artifactId>jstl</artifactId>
        </dependency>

        <!-- Spring Boot Tomcat Starter -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-tomcat</artifactId>
            <scope>provided</scope>
        </dependency>
    </dependencies>

    <build>
        <finalName>payment-management</finalName>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
```

Next, we will create the `run.sh` script to build and run the application using Maven.

run.sh
```sh
#!/bin/bash

# Build the project with Maven
mvn clean package --no-transfer-progress

# Run the application
java -jar target/payment-management.war --no-transfer-progress
```

Make sure to give execution permission to the `run.sh` script:

```sh
chmod +x run.sh
```

Now, let's create the JSP files that will contain all the logic for the payment management system. We will start with the `index.jsp` which will be the entry point of the application.

src/main/webapp/index.jsp
```jsp
<%@ page import="java.sql.*" %>
<%@ page import="javax.sql.DataSource" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
<!DOCTYPE html>
<html>
<head>
    <title>Payment Management</title>
</head>
<body>

<sql:setDataSource var="dataSource" driver="org.h2.Driver"
                   url="jdbc:h2:mem:paymentdb;DB_CLOSE_DELAY=-1;INIT=RUNSCRIPT FROM 'classpath:init.sql'"
                   user="sa" password=""/>

<sql:update dataSource="${dataSource}" var="initDb">
    CREATE TABLE IF NOT EXISTS payments (
        payment_id VARCHAR(255) PRIMARY KEY,
        method VARCHAR(255),
        amount DECIMAL
    );
</sql:update>

<h2>Create Payment</h2>
<form action="createPayment.jsp" method="post">
    Payment Method: <input type="text" name="method" required><br>
    Amount: <input type="text" name="amount" required><br>
    <input type="submit" value="Submit">
</form>

<h2>Payments</h2>
<sql:query dataSource="${dataSource}" var="result">
    SELECT * FROM payments;
</sql:query>
<table border="1">
    <tr>
        <th>Payment ID</th>
        <th>Method</th>
        <th>Amount</th>
    </tr>
    <c:forEach var="row" items="${result.rows}">
        <tr>
            <td><c:out value="${row.payment_id}"/></td>
            <td><c:out value="${row.method}"/></td>
            <td><c:out value="${row.amount}"/></td>
        </tr>
    </c:forEach>
</table>

</body>
</html>
```

Next, we will create the `createPayment.jsp` file which will handle the logic for creating a new payment.

src/main/webapp/createPayment.jsp
```jsp
<%@ page import="java.sql.*" %>
<%@ page import="java.util.UUID" %>
<%@ page contentType="text/html;charset=UTF-8" language="java" %>
<%@ taglib prefix="sql" uri="http://java.sun.com/jsp/jstl/sql" %>
<%
    String method = request.getParameter("method");
    String amount = request.getParameter("amount");
    String paymentId = UUID.randomUUID().toString();

    Connection conn = null;
    PreparedStatement pstmt = null;
    try {
        Class.forName("org.h2.Driver");
        conn = DriverManager.getConnection("jdbc:h2:mem:paymentdb", "sa", "");
        String sql = "INSERT INTO payments (payment_id, method, amount) VALUES (?, ?, ?)";
        pstmt = conn.prepareStatement(sql);
        pstmt.setString(1, paymentId);
        pstmt.setString(2, method);
        pstmt.setBigDecimal(3, new java.math.BigDecimal(amount));
        pstmt.executeUpdate();
    } catch (Exception e) {
        e.printStackTrace();
    } finally {
        if (pstmt != null) try { pstmt.close(); } catch (SQLException ignore) {}
        if (conn != null) try { conn.close(); } catch (SQLException ignore) {}
    }

    response.sendRedirect("index.jsp");
%>
```

Lastly, we need to create an `init.sql` file that will be used to initialize the H2 database with the necessary schema on application startup.

src/main/resources/init.sql
```sql
CREATE TABLE IF NOT EXISTS payments (
    payment_id VARCHAR(255) PRIMARY KEY,
    method VARCHAR(255),
    amount DECIMAL
);
```

This concludes a fully working implementation.